apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: reply-platform-microservice
  title: Create Reply platform microservice
  description: Create the security perimeter for the platform microservice
spec:
  owner: guest
  type: job
  parameters:
    - title: Configuration Options
      required:
        - project_id
        - repoUrl
      properties:
        project_id:
          title: Project ID
          type: string
          default: glin-ap31312-dev
          description: Project id of the Platform microservice
          ui:options:
            rows: 5
        owner:
          title: Owner
          type: string
          default: guest
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: Group
        clusterName:
          title: Cluster to run
          description: The cluster to run this job in.
          type: string
          ui:field: KubernetesClusterPicker
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOrganizations:
              - CNOE-ORG-TEST
  steps:
    - id: create-repo
      name: Create Platform applicative repository
      action: github:repo:create
      input:
        repoUrl: ${{ parameters.repoUrl }}
    - id: fetch-applicative-template
      name: Fetch Applicative Template
      action: fetch:template
      input:
        url: ./applicative-template/
        targetPath: ./applicative-template-compiled/
        values:
          project_id: ${{ parameters.project_id }} #Parametro sostituito nel file applicative-template/nginx.yaml
          owner: ${{ parameters.owner }} #Parametro sostituito nel file applicative-template/infrastructure/k8s/catalog-info.yaml
          name: ${{ parameters.project_id }}-application #Parametro sostituito nel template application.yaml

    - id: init-applicative-repo
      name: Initialize Applicative Repository
      action: github:repo:push
      input:
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: main
        sourcePath: ./applicative-template-compiled/
    - id: wait
      name: Waiting for the repo to be ready
      action: "roadiehq:utils:sleep"
      input:
        amount: 5
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./backstage-template/
        targetPath: backstage-template-compiled
        values:
          namespace: ${{ parameters.project_id }}-namespace #Parametro sostituito nel template namespace.yaml
          repoUrl: ${{ parameters.repoUrl }} #Parametro sostituito nel template application.yaml
          name: ${{ parameters.project_id }}-application #Parametro sostituito nel template application.yaml
    - id: apply-namespace
      name: Apply namespace
      action: cnoe:kubernetes:apply
      input:
        manifestPath: ./backstage-template-compiled/namespace.yaml
        namespaced: false
        clusterName: ${{ parameters.clusterName }} #Parametro usato dall'action per identificare il cluster name
    - id: apply-workflow-template
      name: Apply workflow template
      action: cnoe:kubernetes:apply
      input:
        manifestPath: ./backstage-template-compiled/argo_workflow_template.yaml
        namespaced: false
        clusterName: ${{ parameters.clusterName }} #Parametro usato dall'action per identificare il cluster name
    - id: apply-workflow
      name: Apply workflow
      action: cnoe:kubernetes:apply
      input:
        manifestPath: ./backstage-template-compiled/argo_workflow.yaml
        namespaced: false
        clusterName: ${{ parameters.clusterName }} #Parametro usato dall'action per identificare il cluster name
    #    - id: apply-argocd-application-project
    #      name: Apply argocd application project
    #      action: cnoe:kubernetes:apply
    #      input:
    #        manifestPath: ./backstage-component-cd/backstage-template-compiled/application-project.yaml
    #        namespaced: true
    #        clusterName: ${{ parameters.clusterName }} #Parametro usato dall'action per identificare il cluster name
    - id: apply-argocd-application
      name: Apply argocd application
      action: cnoe:kubernetes:apply
      input:
        manifestPath: ./backstage-template-compiled/application.yaml
        namespaced: true
        clusterName: ${{ parameters.clusterName }} #Parametro usato dall'action per identificare il cluster name

    - id: register-workflow
      name: Register workflow
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['init-applicative-repo'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info-workflow.yaml"

    - id: register-cd
      name: Register cd
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['init-applicative-repo'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info-cd.yaml"
